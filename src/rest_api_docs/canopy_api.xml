<doc logo="" toc_title="Canopy REST API" title="Lorem Ipsum">

<chapter title="Authentication">
    <section title="Permission Model">
        The Canopy REST API is used by both humans and IoT devices.

        There are two types of credentials, depending on whether a human user
        or an IoT device is making the request.  Additionally, two types of
        authentication are supported: <b>BASIC AUTH</b> and
        <b>Session-based AUTH</b>.
        <tbl>
            <row>
                <cell header='1'>Credential Type</cell>
                <cell header='1'>HTTP BASIC AUTH</cell>
                <cell header='1'>Session-based AUTH</cell>
                <cell header='1'>Username</cell>
                <cell header='1'>Password</cell>
            </row>
            <row>
                <cell><b>User</b></cell>
                <cell><b>Yes</b></cell>
                <cell><b>Yes</b></cell>
                <cell>Chosen by user</cell>
                <cell>Chosen by user</cell>
            </row>
            <row>
                <cell><b>Device</b></cell>
                <cell><b>Yes</b></cell>
                <cell>No</cell>
                <cell>Device UUID</cell>
                <cell>Device Secret Key</cell>
            </row>
        </tbl>
    </section>

    <section title="Session-based AUTH Login">
        <subsection title="Request">
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    POST /api/login
                    {
                        "username" : &lt;USERNAME_OR_EMAIL&gt;,
                        "password" : &lt;PASSWORD&gt;
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    POST /api/login
                    {
                        "username" : "leela",
                        "password" : "P1anetExpre55"
                    }
                </mc_item>
                <mc_item title="CURL" syntax='javascript'>
                    curl -c canopy.cookies -d '{ "username" : "leela", "password" : "P1anetExpre55" }' http://sandbox.canopy.link/api/login
                </mc_item>
            </multicode>
        </subsection>
        <subsection title="Success Response">
            Header:
            <code>
                Set-Cookie:canopy-login-session=&lt;COOKIE_VALUE&gt;
            </code>
            Body:
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    200 OK
                    {
                        "result" : "ok",
                        "username" : &lt;USERNAME&gt;,
                        "email" : &lt;EMAIL&gt;
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    200 OK
                    {
                        "result" : "ok",
                        "username" : "leela",
                        "email" : "leela@planetexpress.com"
                    }
                </mc_item>
            </multicode>

        </subsection>
        <subsection title="Error Response">
            Can error out with Bad Request (400), Unauthorized (401)
            or Internal Server Error (500).
        </subsection>
    </section>

    <section title="Session-based AUTH Logout">
        <subsection title="Request">
            <code> POST /api/logout </code>
        </subsection>
        <subsection title="Success Response">
            The <icode>/api/logout/</icode> endpoint sends this
            response whether or not you were logged in.
            <code syntax='javascript'>
                {
                    "result" : "ok"
                }
            </code>
        </subsection>
        <subsection title="Error Response">
            Can error out with Internal Server Error (500).
        </subsection>
    </section>

    <section title="BASIC AUTH for Users">
        <p>
            To use <b>BASIC AUTH</b>, include the Base64-encoded
            "username:password" in every request.  For example, if your
            username is "leela" and your password is "P1anetExpre55", include
            the following header with your request:
        </p>

        <code>
            Authorization: Basic bGVlbGE6UDFhbmV0RXhwcmU1NQ==
        </code>

        <p>
            Most HTTP libraries and tools can handle BASIC AUTH for you.  For
            example:
        </p>
        <multicode>
            <mc_item title="CURL">
                curl -u leela:P1anetExpre55
            </mc_item>
            <mc_item title="JQUERY">
                $.ajax({
                    username : "leela",
                    password : "P1anetExpre55",
                    ...
                });
            </mc_item>
            <mc_item title="PYTHON">
                from requests.auth import HTTPBasicAuth
                requests.get(url, auth=HTTPBasicAuth('leela', 'P1anetExpre55'))
            </mc_item>
        </multicode>
    </section>

    <section title="BASIC AUTH for Devices">
        Canopy REST API requests can be made by both human users and IoT
        devices.  When an IoT device is making the request:
        <ul>
            <li>The device's <b>UUID</b> is the username.</li>
            <li>The device's <b>Secret Key</b> is the password.</li>
        </ul>

        For example:
        <code>
        For a device with:

            - UUID: d5c827d2-1ba7-4da6-b87b-0864f0969fa8
            - Secret Key: 00ae8a3ba42fa86765c885da90a7fcaec9898acb13fc2e00

        You would:

            Base64Encode("d5c827d2-1ba7-4da6-b87b-0864f0969fa8:00ae8a3ba42fa86765c885da90a7fcaec9898acb13fc2e00")

        And then send this header:

            Authorization: Basic ZDVjODI3ZDItMWJhNy00ZGE2LWI4N2ItMDg2NGYwOTY5ZmE4OjAwYWU4YTNiYTQyZmE4Njc2NWM4
            ODVkYTkwYTdmY2FlYzk4OThhY2IxM2ZjMmUwMA==
        </code>
    </section>

</chapter>

<chapter title="Users">
    <section title="Create a User">
        <subsection title="Request">
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    POST /api/create_user
                    {
                        "username" : &lt;USERNAME&gt;,
                        "email" : &lt;EMAIL&gt;,
                        "password" : &lt;PASSWORD&gt;
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    POST /api/create_user
                    {
                        "username" : "leela",
                        "email" : "leela@planetexpress.com",
                        "password" : "P1anetExpre55"
                    }
                </mc_item>
                <mc_item title="CURL" syntax='javascript'>
                    curl -d '{ "username" : "leela", "email": "leela@planetexpress.com", "password" : "P1anetExpre55" }' http://sandbox.canopy.link/api/create_user
                </mc_item>
            </multicode>
            <tbl>
                <row>
                    <cell header='1'>Field</cell>
                    <cell header='1'>Validation</cell>
                </row>
                <row>
                    <cell><icode>"username"</icode></cell>
                    <cell>string
                        <ul>
                            <li>5-24 characters</li>
                            <li>Characters a-z, A-Z, 0-9 and underscore(_) allowed.</li>
                            <li>Must start with a letter</li>
                        </ul>
                    </cell>
                </row>
                <row>
                    <cell><icode>"email"</icode></cell>
                    <cell>string
                        <ul>
                            <li>Must be a valid email address.</li>
                        </ul>
                    </cell>
                </row>
                <row>
                    <cell><icode>"password"</icode></cell>
                    <cell>string
                        <ul>
                            <li>6-120 characters</li>
                            <li>All characters allowed</li>
                            <li>Case sensitive</li>
                        </ul>
                    </cell>
                </row>
            </tbl>
        </subsection>
        <subsection title="Success Response">
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    200 OK
                    {
                        "validated" : false,
                        "email" : &lt;EMAIL&gt;,
                        "result" : "ok",
                        "username" : &lt;USERNAME&gt;
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    200 OK
                    {
                        "validated" : false,
                        "email" : "leela@planetexpress.com",
                        "result" : "ok",
                        "username" : "leela",
                    }
                </mc_item>
            </multicode>
        </subsection>
        <subsection title="Error Response">
            TBD
        </subsection>
    </section>
    <section title="Get Current User">
        <subsection title="Request">
            <code>
                GET /api/me
            </code>
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "validated" : &lt;VALIDATED&gt;,
                    "username" : &lt;USERNAME&gt;,
                    "email" : &lt;EMAIL&gt;,
                }
            </code>
        </subsection>
    </section>
    <section title="Update User Profile">
        <subsection title="Request">
            <code>
                POST /api/me
                {
                    "email" : &lt;NEW_EMAIL&gt;,
                    "old_password" : &lt;OLD_PASSWORD&gt;,
                    "new_password" : &lt;NEW_PASSWORD&gt;
                }
            </code>
            All fields are optional, although if <icode>"new_password"</icode>
            is provided then <icode>"old_password"</icode> must be provided as
            well.  Omitted fields will not be modified.
        </subsection>
        <subsection title="Success Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "username" : &lt;USERNAME&gt;,
                    "email" : &lt;EMAIL&gt;,
                }
            </code>
        </subsection>
        <subsection title="Error Response">
            TBD
        </subsection>
    </section>

    <section title="Delete Current User">
        <subsection title="Request">
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    DELETE /api/me
                </mc_item>
                <mc_item title="CURL" syntax='javascript'>
                    curl -X DELETE -u "username:password" http://sandbox.canopy.link/api/me
                </mc_item>
            </multicode>
        </subsection>
        <subsection title="Success Response">
            <code syntax='javascript'>
                200 OK
                {
                    "result" : "ok",
                }
            </code>
        </subsection>
        <subsection title="Error Response">
            TBD
        </subsection>
    </section>
</chapter>

<chapter title="Devices">
    <section title="Create User-Linked Devices">
        <subsection title="Request">
            To create one or more new devices from when authenticated as a
            User:
            <code syntax='javascript'>
                POST /api/create_devices
                {
                    "quanitity" : &lt;QUANTITY&gt;
                    "friendly_names" : [&lt;FRIENDLY_NAME&gt;, ...]
                }
            </code>
            This will create new device resource(s) and assign the current
            User to have the "creator" role for those device(s).  This will
            also automatically assign a UUID and Secret Key to each new device
            resource.
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "devices" : [ {
                        "friendly_name" : &lt;FRIENDLY_NAME&gt;
                        "device_id" : &lt;UUID&gt;
                        "device_secret_key" : &lt;DEVICE_SECRET_KEY&gt;
                    }, ... ]
                }
            </code>
        </subsection>
    </section>

    <section title="Create Anonymous Device">
        Some deployments of the Canopy Cloud Service allow devices to be
        created that are not associated with any User account.  These are
        called "anonymous devices".

        Each anonymous device has a user-assigned Secret Key that is used to
        restrict access.

        Anonymous devices are automatically created whenever the API call
        <icode>/api/my_device</icode> is made using device credentials that
        have never been encountered before.
    </section>

    <section title="List Devices">
        <subsection title="Request">
            To obtain a list of all devices the current User has access to:
            <code>
                GET /api/me/devices?
                    filter=&lt;FILTER&gt;
                    &amp;sort=&lt;SORT&gt;
                    &amp;limit=&lt;LIMIT&gt;
            </code>
            Details about filtering, sorting, and paginating the results are
            described in the following sections.
        </subsection>
        <subsection title="Filtering Device List">
            <p>
                <icode>&lt;FILTER&gt;</icode> is a sequence of constraints
                encoded as a string.  The terms have the form:
            </p>
            <code>
                &lt;KEY&gt;&lt;REL&gt;&lt;VALUE&gt;
            </code>
            For example:
            <code>
                temperature>=50.8
            </code>
            Unary and boolean operators can be applied to these terms using
            reverse polish notation:
            <code>
                &lt;TERM&gt; &lt;OP&gt;
                &lt;TERM&gt; &lt;TERM&gt; &lt;OP&gt;
            </code>
            For example:
            <code>
                temperature>=50.8 temperature&lt;90.5 AND
            </code>
            Valid terms may be the name of any cloud variable, or one of the
            following builtins:
            <tbl>
                <row>
                    <cell header='1'>Key</cell>
                    <cell header='1'>Description</cell>
                    <cell header='1'>Potential Values</cell>
                </row>
                <row>
                    <cell><icode>ws_connection_status</icode></cell>
                    <cell>Is websocket connected?</cell>
                    <cell>
                        <ul>
                            <li><icode>"never_connected"</icode></li>
                            <li><icode>"connected"</icode></li>
                            <li><icode>"disconnected"</icode></li>
                        </ul>
                    </cell>
                </row>
                <row>
                    <cell><icode>activity_status</icode></cell>
                    <cell>Has device communicated with remote recently</cell>
                    <cell>
                        <ul>
                            <li><icode>"newly_created"</icode></li>
                            <li><icode>"active"</icode></li>
                            <li><icode>"inactive"</icode></li>
                        </ul>
                    </cell>
                </row>
                <row>
                    <cell><icode>&lt;CLOUD_VAR_NAME&gt;</icode></cell>
                    <cell>Filter based on cloud variable value.</cell>
                    <cell>Depends on cloud variable datatype.</cell>
                </row>
            </tbl>

            Valid relations are:
            <tbl>
                <row>
                    <cell header='1'>Relation</cell>
                    <cell header='1'>Description</cell>
                </row>
                <row>
                    <cell>=</cell>
                    <cell>Equals</cell>
                </row>
                <row>
                    <cell>!=</cell>
                    <cell>Does not equal</cell>
                </row>
                <row>
                    <cell>&gt;</cell>
                    <cell>Greater than (numeric and date types only)</cell>
                </row>
                <row>
                    <cell>&gt;=</cell>
                    <cell>Greater than or equal to (numeric and date types only)</cell>
                </row>
                <row>
                    <cell>&lt;</cell>
                    <cell>Less than (numeric and date types only)</cell>
                </row>
                <row>
                    <cell>&lt;=</cell>
                    <cell>Less than or equal to (numeric and date types only)</cell>
                </row>
            </tbl>

            Valid unary operators are:
            <tbl>
                <row>
                    <cell header='1'>Unary Op</cell>
                    <cell header='1'>Description</cell>
                </row>
                <row>
                    <cell>NOT</cell>
                    <cell>Invert operand</cell>
                </row>
                <row>
                    <cell>HAS</cell>
                    <cell>For cloud variables only: does the device have a
                    cloud variable with this name?</cell>
                </row>
            </tbl>

            Valid boolean operations are:
            <tbl>
                <row>
                    <cell header='1'>Boolean Op</cell>
                    <cell header='1'>Description</cell>
                </row>
                <row>
                    <cell>AND</cell>
                    <cell>Both operands are true</cell>
                </row>
                <row>
                    <cell>OR</cell>
                    <cell>Either operand is true</cell>
                </row>
            </tbl>
        </subsection>
        <subsection title="Sorting Device List">
            <icode>&lt;SORT&gt;</icode> is a sequence of comma-separated keys
            specifying the sort order.  The highest priority key comes first,
            followed by tie breakers.  By default ascending order is used.  To
            sort by a key in descending order, add <icode>:DESC</icode> to the
            key.  For sort order determination, a missing cloud variable comes
            before the minimum value (i.e. at the front of the list when
            ascending, at the end of the list when descending).  For example:

            <code>
                temperature,humidity:DESC
            </code>

            The valid keys may be any cloud variable, or builtin.  See
            Filtering Device List.

        </subsection>

        <subsection title="Limits (Pagination)">
            By default, 
        </subsection>

        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "devices" : [ {
                        "device_id" : &lt;UUID&gt;,
                        "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                        "status" : {
                            "ws_connected" : &lt;WS_CONNECTED&gt;,
                            "last_activity_time" : &lt;LAST_ACTIVITY_TIME&gt;,
                        },
                    }, ...  ]
                }
            </code>
        </subsection>
    </section>
    <section title="Get Single Device">
        <subsection title="Request">
            To obtain information about a single device:
            <code>
                GET /api/device/&lt;UUID&gt;
            </code>
            For convenience, you can obtain information about the currently
            authenticated device (if any) using:
            <code>
                GET /api/my_device
            </code>
            This second form of the request can only be made when device
            credentials are provided.  If the provided device credentials are
            unknown to the remote, then a new anonymous device is created.
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "device_id" : &lt;UUID&gt;,
                    "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                    "status" : {
                        "ws_connected" : &lt;WS_CONNECTED&gt;,
                        "last_activity_time" : &lt;LAST_ACTIVITY_TIME&gt;,
                    },
                    "sddl" : { &lt;SDDL&gt; },
                    "vars" : { &lt;VARS&gt; },
                }
            </code>
        </subsection>
    </section>
    <section title="Get Historical Cloud Var Data">
        <subsection title="Request">
            <code>
                GET /api/device/&lt;UUID&gt;/&lt;VAR_PATH&gt;
            </code>
        </subsection>
    </section>
    <section title="Update Device Properties">
        <subsection title="Request">
            To update device properties:
            <code syntax='javascript'>
                POST /api/device/&lt;UUID&gt;
                {
                    "friendly_name" : &lt;NEW_FRIENDLY_NAME&gt;,
                    "location_note" : &lt;NEW_LOCATION_NOTE&gt;
                }
            </code>
            <p>
                All fields are optional and omitted fields will be left
                unchanged.
            </p>
            <p>
                This may be combined with Add/Update Cloud Var Metadata
                and Update Cloud Var Values into a single request.
            </p>
        </subsection>
    </section>

    <section title="Add/Update Cloud Var Metadata">
        <subsection title="Request">
            <p>
                To add a new cloud variable, or update an existing cloud
                variable's metadata, use:
            </p>
            <code syntax='javascript'>
                POST /api/device/&lt;UUID&gt;
                {
                    "sddl" : {
                        &lt;VAR_DECL&gt; : &lt;VAR_PROPERTIES&gt;,
                        ...
                    }
                }
            </code>
            <p>
                This may be combined with Add/Update Cloud Var Metadata
                and Update Cloud Var Values into a single request.
            </p>
            <p>
                To fully replace the list of cloud variables, add
                <icode>"full-replacement" : true</icode> to the request.
                <code>
                    POST /api/device/&lt;UUID&gt;
                    {
                        "sddl" : {
                            "full-replacement" : true,
                            &lt;VAR_DECL&gt; : &lt;VAR_PROPERTIES&gt;,
                            ...
                        }
                    }
                </code>
            </p>
        </subsection>
    </section>
    <section title='Update Cloud Var Value'>
        <p>
            To update Cloud Variable values, use:
        </p>
        <code syntax='javascript'>
            POST /api/device/&lt;UUID&gt;
            {
                "vars" : {
                    &lt;VAR_NAME&gt; : &lt;NEW_VALUE&gt;,
                    ...
                }
            }
        </code>
        <p>
            This will automatically create a cloud variable for each
            newly-encountered var, unless the device's
            <icode>"auto-var-creation"</icode> property is set to
            <icode>false</icode>.  See Automatic Cloud Variable Creation.
        </p>
        <p>
            This request may be made by either a User or a Device.  The Cloud
            Variable's <icode>direction</icode> property controls who can
            modify it:
        </p>
        <tbl>
            <row>
                <cell header='1'>Direction</cell>
                <cell header='1'>Who Can Modify Value</cell>
            </row>
            <row>
                <cell><icode>out</icode></cell>
                <cell></cell>
            </row>
            <row>
                <cell><icode>in</icode></cell>
                <cell></cell>
            </row>
            <row>
                <cell><icode>inout</icode></cell>
                <cell></cell>
            </row>
        </tbl>
    </section>
</chapter>

<chapter title="Synchronization">
    The "synchronization" mechanism allows multiple resources to be tracked and
    updated efficiently with a single API request.  Tracked resources can
    include accounts, devices, and cloud variables.  If using Session-based
    AUTH, the list of tracked resources will be remembered across requests.

    <section title="Track Account Resources">
        <subsection title="Request">
            <code syntax='javascript'>
                POST api/sync
                {
                    ...
                    "track-accounts" : [&lt;USERNAME&gt;, ...]
                    ...
                }
            </code>
        </subsection>
        <subsection title="Response">
            The response will include basic information about each device that
            the tracked accounts have access to.
            <code syntax='javascript'>
                {
                    ...
                    "accounts" : {
                        &lt;USERNAME&gt; : {
                            "devices" : [ &lt;DEVICE_UUID&gt;, ... ]
                        }
                    },
                    "devices" : {
                        &lt;DEVICE_UUID&gt; :  {
                            "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                            "connected" : &lt;CONNECTED&gt;,
                            "sddl_hash" : &lt;SDDL_HASH&gt;,
                        }
                    },
                    "sddl" : {
                        &lt;SDDL_HASH&gt; : {
                            &lt;SDDL&gt;
                        }
                    }
                    ...
                }
            </code>
        </subsection>
    </section>
    <section title="Track Device Resources">
        <code>
            POST api/sync
            {
                ...
                "track-devices" : [&lt;DEVICE_UUID&gt;, ...]
                ...
            }
        </code>
        <subsection title="Response">
            Detailed information about tracked devices, including Cloud
            Variable values, will be included in the response.
            <code>
                {
                    ...
                    "devices" : {
                        &lt;DEVICE_UUID&gt; :  {
                            "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                            "connected" : &lt;CONNECTED&gt;,
                            "sddl_hash" : &lt;SDDL_HASH&gt;,
                            "vars" : &lt;VARS&gt;,
                            "notifs" : &lt;NOTIFICATIONS&gt;,
                        }
                    },
                    "sddl" : {
                        &lt;SDDL_HASH&gt; : {
                            &lt;SDDL&gt;
                        }
                    }
                    ...
                }
            </code>
        </subsection>
    </section>
    <section title="Track Historic Cloud Variable Data">
        <subsection title='Request'>
            <code>
                POST api/sync
                {
                    ...
                    "track-vars" : ["UUID:gps[0].longitude", ...]
                    ...
                }
            </code>
        </subsection>
        <subsection title='Response'>
            <code>
                {
                    "devices" : {
                        &lt;DEVICE_UUID&gt; : {
                            "vars" : {
                                "gps" : [ {
                                    "longitude" : {
                                        "t" : RFC3339DATE,
                                        "v" : CURRENT_VALUE,
                                        "history" : [
                                            &lt;HISTORIC_SAMPLES&lt;
                                        ]
                                    }
                                }, ... ]
                            }
                        }
                    }
                }
            </code>
        </subsection>
    </section>

</chapter>

</doc>
