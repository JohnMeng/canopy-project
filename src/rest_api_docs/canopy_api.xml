<doc logo="" toc_title="Canopy REST API" title="Lorem Ipsum">

<chapter title="Authentication">
    <section title="Account Model">
        The Canopy REST API is used by both humans and IoT devices.  There are
        two types of accounts:

        <tbl>
            <row>
                <cell nowrap='1' header='1'>Account Type</cell>
                <cell nowrap='1' header='1'>Description</cell>
            </row>
            <row>
                <cell nowrap='1'><b>User Account</b></cell>
                <cell>A human.  This may be an <b>end user</b> or a
                <b>device maker</b>.</cell>
            </row>
            <row>
                <cell nowrap='1'><b>Device Account</b></cell>
                <cell>An IoT device.  This account gets created
                automatically whenever a new device resource is generated on
                the server.  See Create Account-Linked Devices and Create
                Anonymous Device.
                </cell>
            </row>
        </tbl>

        Every User Account has some relationship with every device resource.

        <tbl>
            <row>
                <cell header='1'>User-Device Relationship</cell>
                <cell header='1'>Description</cell>
            </row>
            <row>
                <cell><b>No Access</b></cell>
                <cell>User cannot access the device.</cell>
            </row>
            <row>
                <cell><b>End User</b></cell>
                <cell>User can interact with the device as an end user.</cell>
            </row>
            <row>
                <cell><b>Device Maker</b></cell>
                <cell>User can manage the device from an inventory standpoint,
                but may not directly control or monitor it without permission from the end user.</cell>
            </row>
            <row>
                <cell><b>Device Maker + End User</b></cell>
                <cell>User can do everything with the device.</cell>
            </row>
        </tbl>
        <subsection title='Methods of Authentication'>
            Two types of authentication are supported: <b>BASIC AUTH</b> and
            <b>Session-based AUTH</b>.
            <tbl>
                <row>
                    <cell header='1'>Account Type</cell>
                    <cell header='1'>HTTP BASIC AUTH</cell>
                    <cell header='1'>Session-based AUTH</cell>
                    <cell header='1'>Username</cell>
                    <cell header='1'>Password</cell>
                </row>
                <row>
                    <cell><b>User Account</b></cell>
                    <cell><b>Yes</b></cell>
                    <cell><b>Yes</b></cell>
                    <cell>Chosen by user</cell>
                    <cell>Chosen by user</cell>
                </row>
                <row>
                    <cell><b>Device Account</b></cell>
                    <cell><b>Yes</b></cell>
                    <cell>No</cell>
                    <cell>Device UUID</cell>
                    <cell>Device Secret Key</cell>
                </row>
            </tbl>
        </subsection>
    </section>

    <section title="Session-based AUTH Login">
        <subsection title="Request">
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    POST /api/login
                    {
                        "username" : &lt;USERNAME_OR_EMAIL&gt;,
                        "password" : &lt;PASSWORD&gt;
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    POST /api/login
                    {
                        "username" : "leela",
                        "password" : "P1anetExpre55"
                    }
                </mc_item>
                <mc_item title="CURL" syntax='javascript'>
                    curl -c canopy.cookies -d '{ "username" : "leela", "password" : "P1anetExpre55" }' http://sandbox.canopy.link/api/login
                </mc_item>
            </multicode>
        </subsection>
        <subsection title="Response">
            Header:
            <code>
                Set-Cookie:canopy-login-session=&lt;COOKIE_VALUE&gt;
            </code>
            Body:
            <multicode>
                <mc_item title="REST" syntax='javascript'>
                    200 OK
                    {
                        "result" : "ok",
                        "username" : &lt;USERNAME&gt;,
                        "email" : &lt;EMAIL&gt;
                    }
                </mc_item>
                <mc_item title="EXAMPLE" syntax='javascript'>
                    200 OK
                    {
                        "result" : "ok",
                        "username" : "leela",
                        "email" : "leela@planetexpress.com"
                    }
                </mc_item>
            </multicode>
        </subsection>
    </section>

    <section title="Session-based AUTH Logout">
        <subsection title="Request">
            <code> POST /api/logout </code>
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok"
                }
            </code>
        </subsection>
    </section>

    <section title="BASIC AUTH for Users">
        <p>
            To use <b>BASIC AUTH</b>, include the Base64-encoded
            "username:password" in every request.  For example, if your
            username is "leela" and your password is "P1anetExpre55", include
            the following header with your request:
        </p>

        <code>
            Authorization: Basic bGVlbGE6UDFhbmV0RXhwcmU1NQ==
        </code>

        <p>
            Most HTTP libraries and tools can handle BASIC AUTH for you.  For
            example:
        </p>
        <multicode>
            <mc_item title="CURL">
                curl -u leela:P1anetExpre55
            </mc_item>
            <mc_item title="JQUERY">
                $.ajax({
                    username : "leela",
                    password : "P1anetExpre55",
                    ...
                });
            </mc_item>
            <mc_item title="PYTHON">
                from requests.auth import HTTPBasicAuth
                requests.get(url, auth=HTTPBasicAuth('leela', 'P1anetExpre55'))
            </mc_item>
        </multicode>
    </section>

    <section title="BASIC AUTH for Devices">
        Canopy REST API requests can be made by both human users and IoT
        devices.  When an IoT device is making the request:
        <ul>
            <li>The device's <b>UUID</b> is the username.</li>
            <li>The device's <b>Secret Key</b> is the password.</li>
        </ul>

        For example:
        <code>
        For a device with:

            - UUID: d5c827d2-1ba7-4da6-b87b-0864f0969fa8
            - Secret Key: 00ae8a3ba42fa86765c885da90a7fcaec9898acb13fc2e00

        You would:

            Base64Encode("d5c827d2-1ba7-4da6-b87b-0864f0969fa8:00ae8a3ba42fa86765c885da90a7fcaec9898acb13fc2e00")

        And then send this header:

            Authorization: Basic ZDVjODI3ZDItMWJhNy00ZGE2LWI4N2ItMDg2NGYwOTY5ZmE4OjAwYWU4YTNiYTQyZmE4Njc2NWM4
            ODVkYTkwYTdmY2FlYzk4OThhY2IxM2ZjMmUwMA==
        </code>
    </section>

</chapter>

<chapter title="User Accounts">
    <section title="Create a User Account">
        <subsection title="Request">
            <code syntax='javascript'>
                POST /api/create_account
                {
                    "username" : &lt;USERNAME&gt;,
                    "email" : &lt;EMAIL&gt;,
                    "password" : &lt;PASSWORD&gt;,
                }
            </code>
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "username" : &lt;USERNAME&gt;,
                    "email" : &lt;EMAIL&gt;,
                }
            </code>
        </subsection>
    </section>
    <section title="Get Current User Account">
        <subsection title="Request">
            <code>
                GET /api/me
            </code>
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "username" : &lt;USERNAME&gt;,
                    "email" : &lt;EMAIL&gt;,
                }
            </code>
        </subsection>
    </section>
</chapter>

<chapter title="Devices">
    <section title="Create Account-Linked Devices">
        <subsection title="Request">
            To create one or more new devices from a User Account:
            <code syntax='javascript'>
                POST /api/create_devices
                {
                    "quanitity" : &lt;QUANITITY&gt;
                    "friendly_names" : [&lt;FRIENDLY_NAME&gt;, ...]
                }
            </code>
            This will create a new device resource and associate it with the
            current User Account.  This will also automatically assign a UUID
            and Secret Key to each new device resource.
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "devices" : [ {
                        "friendly_name" : &lt;FRIENDLY_NAME&gt;
                        "device_id" : &lt;UUID&gt;
                        "device_secret_key" : &lt;DEVICE_SECRET_KEY&gt;
                    }, ... ]
                }
            </code>
        </subsection>
    </section>
    <section title="Create Anonymous Device">
        Some deployments of the Canopy Cloud Service allow devices to be
        created that are not associated with any User account.  These are
        called "anonymous devices".

        Each anonymous device has a user-assigned Secret Key that is used to
        restrict access.

        Anonymous devices are automatically created by the
        <icode>/api/sync</icode> endpoint.  When <icode>/api/sync</icode>
        encounters a new Device UUID in the BASIC AUTH header, it will create a
        new anonymous device.
    </section>

    <section title="List Devices">
        <subsection title="Request">
            To obtain a list of all devices the current Account has access to:
            <code>
                GET /api/me/devices
            </code>
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "devices" : [ {
                        "device_id" : &lt;UUID&gt;,
                        "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                        "connected" : &lt;CONNECTED&gt;,
                        "sddl" : { &lt;SDDL&gt; },
                        "vars" : { &lt;VARS&gt; },
                    }, ...  ]
                }
            </code>
        </subsection>
    </section>
    <section title="Get Single Device">
        <subsection title="Request">
            To obtain information about a single device:
            <code>
                GET /api/device/&lt;UUID&gt;
            </code>
        </subsection>
        <subsection title="Response">
            <code syntax='javascript'>
                {
                    "result" : "ok",
                    "device_id" : &lt;UUID&gt;,
                    "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                    "connected" : &lt;CONNECTED&gt;,
                    "sddl" : { &lt;SDDL&gt; },
                    "vars" : { &lt;VARS&gt; },
                }
            </code>
        </subsection>
    </section>
    <section title="Get Historical Cloud Var Data">
        <subsection title="Request">
            <code>
                GET /api/device/&lt;UUID&gt;/&lt;VAR_PATH&gt;
            </code>
        </subsection>
    </section>
    <section title="Update Device Properties">
        <subsection title="Request">
            To update device properties:
            <code syntax='javascript'>
                POST /api/device/&lt;UUID&gt;
                {
                    "friendly_name" : &lt;NEW_FRIENDLY_NAME&gt;,
                    "location_note" : &lt;NEW_LOCATION_NOTE&gt;,
                }
            </code>
            <p>
                All fields are optional and omitted fields will be left
                unchanged.
            </p>
            <p>
                This may be combined with Add/Update Cloud Var Metadata
                and Update Cloud Var Values into a single request.
            </p>
        </subsection>
    </section>

    <section title="Add/Update Cloud Var Metadata">
        <subsection title="Request">
            <p>
                To add a new cloud variable, or update an existing cloud
                variable's metadata, use:
            </p>
            <code syntax='javascript'>
                POST /api/device/&lt;UUID&gt;
                {
                    "sddl" : {
                        &lt;VAR_DECL&gt; : &lt;VAR_PROPERTIES&gt;,
                        ...
                    }
                }
            </code>
            <p>
                This may be combined with Add/Update Cloud Var Metadata
                and Update Cloud Var Values into a single request.
            </p>
            <p>
                To fully replace the list of cloud variables, add
                <icode>"full-replacement" : true</icode> to the request.
                <code>
                    POST /api/device/&lt;UUID&gt;
                    {
                        "sddl" : {
                            "full-replacement" : true,
                            &lt;VAR_DECL&gt; : &lt;VAR_PROPERTIES&gt;,
                            ...
                        }
                    }
                </code>
            </p>
        </subsection>
    </section>
    <section title='Update Cloud Var Value'>
        <p>
            To update Cloud Variable values, use:
        </p>
        <code syntax='javascript'>
            POST /api/device/&lt;UUID&gt;
            {
                "vars" : {
                    &lt;VAR_NAME&gt; : &lt;NEW_VALUE&gt;,
                    ...
                }
            }
        </code>
        <p>
            This will automatically create a cloud variable for each
            newly-encountered var, unless the device's
            <icode>"auto-var-creation"</icode> property is set to
            <icode>false</icode>.  See Automatic Cloud Variable Creation.
        </p>
        <p>
            This request may be made by either a User Account or a Device
            Account.  The Cloud Variable's <icode>direction</icode>
            property controls who can modify it:
        </p>
        <tbl>
            <row>
                <cell header='1'>Direction</cell>
                <cell header='1'>Who Can Modify Value</cell>
            </row>
            <row>
                <cell><icode>in</icode></cell>
                <cell>User Account</cell>
            </row>
            <row>
                <cell><icode>out</icode></cell>
                <cell>Device Account</cell>
            </row>
            <row>
                <cell><icode>inout</icode></cell>
                <cell>User or Device Account</cell>
            </row>
        </tbl>
    </section>
</chapter>

<chapter title="Synchronization">
    The "synchronization" mechanism allows multiple resources to be tracked and
    updated efficiently with a single API request.  Tracked resources can
    include accounts, devices, and cloud variables.  If using Session-based
    AUTH, the list of tracked resources will be remembered across requests.

    <section title="Track Account Resources">
        <subsection title="Request">
            <code syntax='javascript'>
                POST api/sync
                {
                    ...
                    "track-accounts" : [&lt;USERNAME&gt;, ...]
                    ...
                }
            </code>
        </subsection>
        <subsection title="Response">
            The response will include basic information about each device that
            the tracked accounts have access to.
            <code syntax='javascript'>
                {
                    ...
                    "accounts" : {
                        &lt;USERNAME&gt; : {
                            "devices" : [ &lt;DEVICE_UUID&gt;, ... ]
                        }
                    },
                    "devices" : {
                        &lt;DEVICE_UUID&gt; :  {
                            "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                            "connected" : &lt;CONNECTED&gt;,
                            "sddl_hash" : &lt;SDDL_HASH&gt;,
                        }
                    },
                    "sddl" : {
                        &lt;SDDL_HASH&gt; : {
                            &lt;SDDL&gt;
                        }
                    }
                    ...
                }
            </code>
        </subsection>
    </section>
    <section title="Track Device Resources">
        <code>
            POST api/sync
            {
                ...
                "track-devices" : [&lt;DEVICE_UUID&gt;, ...]
                ...
            }
        </code>
        <subsection title="Response">
            Detailed information about tracked devices, including Cloud
            Variable values, will be included in the response.
            <code>
                {
                    ...
                    "devices" : {
                        &lt;DEVICE_UUID&gt; :  {
                            "friendly_name" : &lt;FRIENDLY_NAME&gt;,
                            "connected" : &lt;CONNECTED&gt;,
                            "sddl_hash" : &lt;SDDL_HASH&gt;,
                            "vars" : &lt;VARS&gt;,
                            "notifs" : &lt;NOTIFICATIONS&gt;,
                        }
                    },
                    "sddl" : {
                        &lt;SDDL_HASH&gt; : {
                            &lt;SDDL&gt;
                        }
                    }
                    ...
                }
            </code>
        </subsection>
    </section>
    <section title="Track Historic Cloud Variable Data">
        <subsection title='Request'>
            <code>
                POST api/sync
                {
                    ...
                    "track-vars" : ["UUID:gps[0].longitude", ...]
                    ...
                }
            </code>
        </subsection>
        <subsection title='Response'>
            <code>
                {
                    "devices" : {
                        &lt;DEVICE_UUID&gt; : {
                            "vars" : {
                                "gps" : [ {
                                    "longitude" : {
                                        "t" : RFC3339DATE,
                                        "v" : CURRENT_VALUE,
                                        "history" : [
                                            &lt;HISTORIC_SAMPLES&lt;
                                        ]
                                    }
                                }, ... ]
                            }
                        }
                    }
                }
            </code>
        </subsection>
    </section>

</chapter>

</doc>

