<doc logo="" toc_title="Canopy Server" title="Canopy Server">
<chapter title='Overview'>
    <section title='About'>
        The <b>Canopy Server</b> is a server-side program written in GoLang.  It serves
        the <a target="_blank" href="../restapi/canopy_api.html">Canopy REST API</a> and Canopy
        Websocket API.  Additionally, it can be configured to serve the Canopy
        Device Manager which provides a web-based frontend.
    </section>
    <section title='Hosting Options'>
        <subsection title='Hosted by Us'>
            <p>
                The Canopy team operates two large-scale deployments of the Canopy
                Server.  These are hosted in a world-class datacenter with high
                availability.  
                <ul>
                    <li>
                        <a target='_blank' href="http://sandbox.canopy.link">
                        <b>http://sandbox.canopy.link</b></a>: Free deployment for
                        learning Canopy and developing smart products.
                    </li>
                    <li>
                        <a target='_blank' href="http://sandbox.canopy.link">
                        <b>http://ccs.canopy.link</b></a>: Enterprise-grade
                        deployment for shipping products.
                    </li>
                </ul>
                Learn more about these deployments on our <a target="_blank"
                href='http://canopy.link/services.html'>Services</a> page.
            </p>
        </subsection>
        <subsection title='Hosted by You'>
            <p>
                The Canopy Server is completely open source and licensed under
                the highly-permisive Apache v2.0 license.  It is easy to deploy
                your own instance of the server by following the Installation
                instructions in this document.
            </p>
        </subsection>

    </section>
</chapter>

<chapter title='Installation'>
    <p>
        This section contains instructions for installing the Canopy Server
        from source on a fresh Ubuntu 14.04 LTS machine.  This may be installed
        in a public cloud, private cloud, local network, or even on your
        laptop!
    </p>
    <section title='Installing Dependencies'>
        <p>
            Canopy requires Cassandra, Oracle Java 1.7, and Go-lang in order to
            run.
        </p>
        <subsection title='Installing Cassandra'>
            <p>
                Using the text editor of your choice, edit
                <icode>/etc/apt/sources.list.d/cassandra.sources.list</icode>:
            </p>
            <code>
                sudo vim /etc/apt/sources.list.d/cassandra.sources.list
            </code>
            <p>
                Add the following line:
            </p>
            <code>
                deb http://debian.datastax.com/community stable main
            </code>
            <p>
                Save and exit.  Then run:
            </p>
            <code>
                curl -L http://debian.datastax.com/debian/repo_key | sudo apt-key add -
                sudo apt-get update
                sudo apt-get install -y cassandra=2.0.7
            </code>
        </subsection>

        <subsection title='Installing Oracle Java 1.7'>
            <p>
                Run:
            </p>
            <code>
                sudo apt-get install -y python-software-properties
                sudo add-apt-repository ppa:webupd8team/java
            </code>
            <p>
                Press ENTER when prompted.  The run:
            </p>
            <code>
                sudo apt-get update
                sudo apt-get install -y oracle-java7-installer
            </code>
            <p>
                When prompted, press ENTER.  Then select "Yes" and press ENTER.
            </p>
        </subsection>
        <subsection title='Installing Go-lang'>
            <p>
                Run:
            </p>
            <code>
                sudo apt-get install -y golang git make mercurial
            </code>
        </subsection>
        <subsection title='Installing Canopy Server'>
            <p>
                Clone the repository:
            </p>
            <code>git clone https://github.com/canopy-project/canopy-cloud
            </code>
            <p>
                Build the project:
            </p>
            <code>
                cd canopy-cloud
                make
            </code>
            <p>
                You should see this output:
            </p>
            <output>
                make -C src/canopy go_get_deps
                make[1]: Entering directory `/home/ubuntu/canopy-cloud/src/canopy'
                mkdir -p ~/.canopy/golang
                GOPATH=$(cd ~/.canopy/golang; pwd):$(cd ../../; pwd) go get code.google.com/p/go.net/websocket
                GOPATH=$(cd ~/.canopy/golang; pwd):$(cd ../../; pwd) go get github.com/gocql/gocql
                GOPATH=$(cd ~/.canopy/golang; pwd):$(cd ../../; pwd) go get github.com/gorilla/sessions
                GOPATH=$(cd ~/.canopy/golang; pwd):$(cd ../../; pwd) go get github.com/gorilla/context
                GOPATH=$(cd ~/.canopy/golang; pwd):$(cd ../../; pwd) go get github.com/gorilla/mux
                GOPATH=$(cd ~/.canopy/golang; pwd):$(cd ../../; pwd) go get github.com/sendgrid/sendgrid-go
                GOPATH=$(cd ~/.canopy/golang; pwd):$(cd ../../; pwd) go get code.google.com/p/go.crypto/bcrypt
                make[1]: Leaving directory `/home/ubuntu/canopy-cloud/src/canopy'
                make -C src/canopy all
                make[1]: Entering directory `/home/ubuntu/canopy-cloud/src/canopy'
                mkdir -p ~/.canopy/golang
                GOPATH=$(cd ~/.canopy/golang; pwd):$(cd ../../; pwd) go build canopy-cloud-service.go canopy_cloud.go canopy_json.go
                mkdir -p build/
                mv canopy-cloud-service build/
                mkdir -p ~/.canopy/golang
                GOPATH=$(cd ~/.canopy/golang; pwd):$(cd ../../; pwd) go build canopy_cmd.go
                mkdir -p build/
                mv canopy_cmd build/canodevtool
                make[1]: Leaving directory `/home/ubuntu/canopy-cloud/src/canopy'
            </output>
            <p>
                Install it:
            </p>
            <code>
                sudo make install
            </code>
            <p>
                You should see this output:
            </p>

            <output>
                src/canopy install
                make[1]: Entering directory `/home/ubuntu/canopy-cloud/src/canopy'
                cp build/canopy-cloud-service build/canodevtool /usr/local/bin
                cp ../../scripts/canopy-cloud-service /etc/init.d
                mkdir -p /etc/canopy
                cp ../../scripts/ccs-env.sh /etc/canopy
                ../../scripts/create-canopy-group-user.sh
                id: canopy: no such user
                Adding group `canopy' (GID 114) ...
                Done.
                id: canopy: no such user
                Adding system user `canopy' (UID 108) ...
                Adding new user `canopy' (UID 108) with group `canopy' ...
                Not creating home directory `/home/canopy'.
                mkdir -p /var/log/canopy
                touch /var/log/canopy/ccs.log
                touch /var/log/canopy/ccs-errors.log
                chown canopy /var/log/canopy
                chgrp canopy /var/log/canopy
                chown canopy /var/log/canopy/ccs.log
                chgrp canopy /var/log/canopy/ccs.log
                chown canopy /var/log/canopy/ccs-errors.log
                chgrp canopy /var/log/canopy/ccs-errors.log
                make[1]: Leaving directory `/home/ubuntu/canopy-cloud/src/canopy'
            </output>
            <p>
                Start Cassandra running:
            </p>
            <code>
                sudo cassandra
            </code>
            <p>
                You should see a bunch of text scroll, ending with:
            </p>
            <output>
                INFO 17:24:59,576 Completed flushing /var/lib/cassandra/data/system/local/system-local-jb-3-Data.db (114 bytes) for commitlog position ReplayPosition(segmentId=1410197098396, position=91604)
                INFO 17:24:59,644 CFS(Keyspace='system', ColumnFamily='local') liveRatio is 27.44988344988345 (just-counted was 3.515151515151515).  calculation took 5ms for 257 cells
                INFO 17:24:59,644 Enqueuing flush of Memtable-local@414544706(10098/277188 serialized/live bytes, 259 ops)
                INFO 17:24:59,645 Writing Memtable-local@414544706(10098/277188 serialized/live bytes, 259 ops)
                INFO 17:24:59,677 Completed flushing /var/lib/cassandra/data/system/local/system-local-jb-4-Data.db (5275 bytes) for commitlog position ReplayPosition(segmentId=1410197098396, position=103603)
                INFO 17:24:59,693 Compacting [SSTableReader(path='/var/lib/cassandra/data/system/local/system-local-jb-1-Data.db'), SSTableReader(path='/var/lib/cassandra/data/system/local/system-local-jb-3-Data.db'), SSTableReader(path='/var/lib/cassandra/data/system/local/system-local-jb-4-Data.db'), SSTableReader(path='/var/lib/cassandra/data/system/local/system-local-jb-2-Data.db')]
                INFO 17:24:59,780 Node localhost/127.0.0.1 state jump to normal
            </output>
            <p>
                Press ENTER to return to the command-line.
            </p>
            <p>
                Create the database:
            </p>
            <code>
                canodevtool create-db
            </code>

            <p>
                Don't worry if there are errors.  You should see this output:
            </p>

            <output>
                Error opening file /var/log/canopy/ccs.log:  open /var/log/canopy/ccs.log: permission denied
                Falling back to STDOUT for logging
                WARN 2014/09/08 17:28:24 cass_datalayer.go:340: (IGNORED)  line 6:19 mismatched input '(' expecting ')'
            </output>
        </subsection>
    </section>
    
    <section title='Configuring and Running'>
        <subsection title='Configuring the Cloud Server'>
            One last step before running the Canopy Cloud Service.  We must configure it.
            Edit the file: 
            <code>
                /etc/canopy/server.conf
            </code>
            <p>
                Change the <icode>"hostname"</icode> to match the IP address or hostname of your server.
            </p>
            <p>
                There a many other configuration options you can modify.  Learn
                more about configuring the server in the Configuration chapter.
            </p>
        </subsection>

        <subsection title='Starting the Canopy Server'>
            <p>
                Now, you can start the Canopy Server
            </p>
            <code>
                sudo /etc/init.d/canopy-cloud-service start
            </code>

            <p>
                To check that it is working, go to
                <icode>http://&lt;ip_address&gt;/api/info</icode> in your web
                browser.  You should see something like the following response:
            </p>
            <code>
                {
                    "service-name" : "Canopy Cloud Service",
                    "version" : "0.9.0-beta"
                }
            </code>
            <p>
                If you see anything other than that, there was most likely a
                problem.  You can view the log file by typing:
            </p>

            <code>
                cat /var/log/canopy/canopy-server.log
            </code>
        </subsection>
    </section>
</chapter>

<chapter title='Configuration'>
    <section title='Config Priority'>
        <p>
            The Canopy Server's configuration is read from one or more config
            files.  Config settings can be overridden with environment
            variables and command-line parameters.
        </p>
        <p>
            This table shows the ordering in which configuration is read:
        </p>
        <tbl>
            <row>
                <cell header='1'>
                    Config Source
                </cell>
                <cell header='1'>
                    Order
                </cell>
            </row>
            <row>
                <cell><icode>Compiled Defaults</icode></cell>
                <cell>1 - Lowest priority (read first)</cell>
            </row>
            <row>
                <cell><icode>/etc/canopy/server.conf</icode></cell>
                <cell>2</cell>
            </row>
            <row>
                <cell><icode>$HOME/.canopy/server.conf</icode></cell>
                <cell>3</cell>
            </row>
            <row>
                <cell><icode>$CANOPY_SERVER_CONFIG_FILE</icode></cell>
                <cell>4</cell>
            </row>
            <row>
                <cell><icode>Environment Variables</icode></cell>
                <cell>5</cell>
            </row>
            <row>
                <cell><icode>Command-line Parameters</icode></cell>
                <cell>6 - Highest priority (read last)</cell>
            </row>
        </tbl>
    </section>
    <section title='Configuration Settings'>
        <tbl>
            <row>
                <cell header='1'>
                    JSON Key
                </cell>
                <cell header='1'>
                    Environment Variable
                </cell>
                <cell header='1'>
                    Command-line Option
                </cell>
                <cell header='1'>
                    Description
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"allow-anon-devices"</icode></cell>
                <cell nowrap='1'><icode>ALLOW_ANON_DEVICES</icode></cell>
                <cell nowrap='1'><icode>--allow-anon-devices=</icode></cell>
                <cell>
                    If <icode>true</icode>, allow anonymous devices to post
                    data to the server.  If <icode>false</icode>, require that
                    every device has an associated User Account.
                    <p>
                        <b>Default:</b> <icode>true</icode>
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"allow-origin"</icode></cell>
                <cell nowrap='1'><icode>CCS_ALLOW_ORIGIN</icode></cell>
                <cell nowrap='1'><icode>--allow-origin=</icode></cell>
                <cell>
                    Domains to include in the "allow-origin" header of HTTP
                    responses.
                    <p>
                        <b>Default:</b> <icode>""</icode>
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"email-service"</icode></cell>
                <cell nowrap='1'><icode>CCS_EMAIL_SERVICE</icode></cell>
                <cell nowrap='1'><icode>--email-service=</icode></cell>
                <cell>
                    Selects external service to use for sending email.  Valid
                    options are:
                    <ul>
                        <li><icode>"none"</icode> - Do not send email.</li>
                        <li><icode>"sendgrid"</icode> - Use SendGrid to send email.</li>
                    </ul>
                    If <icode>"sendgrid"</icode>, then you must also set
                    <icode>"sendgrid-username"</icode> and
                    <icode>"sendgrid-secret-key"</icode>.
                    <p>
                        <b>Default:</b> <icode>"none"</icode>
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"enable-http"</icode></cell>
                <cell nowrap='1'><icode>CCS_ENABLE_HTTP</icode></cell>
                <cell nowrap='1'><icode>--enable-http=</icode></cell>
                <cell>
                    Serve the Canopy REST API over HTTP.
                    <p>
                        <b>Warning:</b> Enabling this option makes Canopy
                        vulnerable to a number of attacks, including password
                        snooping, man-in-the-middle attacks, and more.  This
                        option should only be used if Canopy is deployed on a
                        secured LAN and you know what you're doing!
                    </p>
                    <p>
                        <b>Default:</b> <icode>false</icode>
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"enable-https"</icode></cell>
                <cell nowrap='1'><icode>CCS_ENABLE_HTTPS</icode></cell>
                <cell nowrap='1'><icode>--enable-https=</icode></cell>
                <cell>
                    Serve the Canopy REST API over HTTPS.
                    <p>
                        <b>Default:</b> <icode>true</icode>
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"forward-other-hosts"</icode></cell>
                <cell nowrap='1'><icode>CCS_FORWARD_OTHER_HOSTS</icode></cell>
                <cell nowrap='1'><icode>--forward-other-hosts=</icode></cell>
                <cell>
                    The Canopy Server includes a proxy server that forwards
                    along all HTTP requests to other hostnames.  This specifies
                    the destination URL for these requests.  If
                    <icode>""</icode> then forwarding will be disabled.
                    <p>
                        <b>Default:</b> <icode>""</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"hostname"</icode></cell>
                <cell nowrap='1'><icode>CCS_HOSTNAME</icode></cell>
                <cell nowrap='1'><icode>--hostname=</icode></cell>
                <cell>
                    Virtual hostname for Canopy Server.  This option is
                    required.  HTTP requests to other hosts will be forwarded
                    to the <icode>"forward-other-hosts"</icode>.
                    <p>
                        <b>Default:</b> <icode>""</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"http-port"</icode></cell>
                <cell nowrap='1'><icode>CCS_HTTP_PORT</icode></cell>
                <cell nowrap='1'><icode>--http-port=</icode></cell>
                <cell>
                    HTTP port to listen on.
                    <p>
                        <b>Default:</b> <icode>80</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"https-cert-file"</icode></cell>
                <cell nowrap='1'><icode>CCS_HTTPS_CERT_FILE</icode></cell>
                <cell nowrap='1'><icode>--https-cert-file=</icode></cell>
                <cell>
                    Filename of HTTPS certificate file on local file system.
                    For example: <icode>"/etc/canopy/cert.pem"</icode>.
                    This is mandatory if <icode>"enable-https"</icode> is
                    <icode>true</icode>.
                    <p>
                        <b>Default:</b> <icode>""</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"https-port"</icode></cell>
                <cell nowrap='1'><icode>CCS_HTTPS_PORT</icode></cell>
                <cell nowrap='1'><icode>--https-port=</icode></cell>
                <cell>
                    HTTPS port to listen on.
                    <p>
                        <b>Default:</b> <icode>443</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"https-priv-key-file"</icode></cell>
                <cell nowrap='1'><icode>CCS_HTTPS_PRIV_KEY_FILE</icode></cell>
                <cell nowrap='1'><icode>--http-priv-key-file=</icode></cell>
                <cell>
                    Filename of HTTPS private key file on local file system.
                    For example: <icode>"/etc/canopy/key.pem"</icode>.
                    This is mandatory if <icode>"enable-https"</icode> is
                    <icode>true</icode>.
                    <p>
                        <b>Default:</b> <icode>""</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"js-client-path"</icode></cell>
                <cell nowrap='1'><icode>CCS_JS_CLIENT_PATH</icode></cell>
                <cell nowrap='1'><icode>--js-client-path=</icode></cell>
                <cell>
                    Local filesystem path to the <icode>canopy-js-client/</icode>
                    project.
                    This must be configured to enable the Canopy Device
                    Manager.
                    <p>
                        <b>Default:</b> <icode>""</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"log-file"</icode></cell>
                <cell nowrap='1'><icode>CCS_LOG_FILE</icode></cell>
                <cell nowrap='1'><icode>--log-file=</icode></cell>
                <cell>
                    Location of log file on local filesystem.
                    <p>
                        <b>Default:</b> <icode>"/var/log/canopy/canopy-server.log"</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"production-secret"</icode></cell>
                <cell nowrap='1'><icode>CCS_PRODUCTION_SECRET</icode></cell>
                <cell nowrap='1'><icode>--production-secret=</icode></cell>
                <cell>
                    Secure secret string that must not be made public and
                    should be different for every server.  This is used to
                    secure session cookies.
                    <p>
                        <b>Default:</b> <icode>""</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"sendgrid-secret-key"</icode></cell>
                <cell nowrap='1'><icode>CCS_SENDGRID_SECRET_KEY</icode></cell>
                <cell nowrap='1'><icode>--sendgrid-secret-key=</icode></cell>
                <cell>
                    Secure secret key provided by SendGrid.  This must not be
                    made public and should be different for every server.  This
                    is required if <icode>"email-service"</icode> is
                    <icode>"sendgrid"</icode>.  Otherwise it is ignored.
                    <p>
                        <b>Default:</b> <icode>""</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"sendgrid-username"</icode></cell>
                <cell nowrap='1'><icode>CCS_SENDGRID_USERNAME</icode></cell>
                <cell nowrap='1'><icode>--sendgrid-secret-key=</icode></cell>
                <cell>
                    Username of SendGrid account, used for sending emails.
                    This is required if <icode>"email-service"</icode> is
                    <icode>"sendgrid"</icode>.  Otherwise it is ignored.
                    <p>
                        <b>Default:</b> <icode>""</icode>.
                    </p>
                </cell>
            </row>
            <row>
                <cell nowrap='1'><icode>"web-manager-path"</icode></cell>
                <cell nowrap='1'><icode>CCS_WEB_MANAGER_PATH</icode></cell>
                <cell nowrap='1'><icode>--web-manager-path=</icode></cell>
                <cell>
                    Local filesystem path to the <icode>canopy-app/</icode>
                    project.
                    This must be configured to enable the Canopy Device
                    Manager.
                    <p>
                        <b>Default:</b> <icode>""</icode>.
                    </p>
                </cell>
            </row>
        </tbl>
    </section>
    <section title='Config File Example'>
        <code>
            {
                "allow-anon-devices" : false,
                "allow-origin" : "sandbox.canopy.link myiotapp.com",
                "email-service" : "sendgrid",
                "enable-http" : false,
                "enable-https" : true,
                "forward-other-hosts" : "http://canopy.link",
                "http-port" : 80,
                "https-cert-file" : "/etc/canopy/cert.pem",
                "https-port" : 443,
                "https-priv-key-file" : "/etc/canopy/key.pem",
                "hostname" : "sandbox.canopy.link",
                "js-client-path" : "/home/ubuntu/canopy-js-client",
                "production-secret" : "my production secret",
                "sendgrid-secret-key" : "ljP)48-1x*CL@0iA#",
                "sendgrid-username" : "mysendgridusername",
                "web-manager-path" : "/home/ubuntu/canopy-app",
            }
        </code>
    </section>
    <section title='Environment Override Example'>
        For example, to run the Canopy Server as a non-root user, you might use:
        <code>
            CCS_HTTP_PORT=8080 CCS_LOG_FILE="ccs.log" /usr/local/bin/canopy/canopy-server
        </code>
    </section>
    <section title='Command-line Override Example'>
        An alternative way to run the Canopy Server as a non-root user is:
        <code>
            /usr/local/bin/canopy/canopy-server --http-port=8080 --log-file="ccs.log"
        </code>
    </section>
    <section title='Checking the Configuration'>
        <p>
            You can check the configuration of a running Canopy Server using
            the <icode>/api/info</icode> endpoint.  For example:
        </p>
        <p>
            <a target='_blank' href="http://sandbox.canopy.link/api/info"><b>http://sandbox.canopy.link/api/info</b></a>
        </p>
        <p>
            Additionally, the log file may contain a dump of all configuration
            settings (except passwords) when the server starts up:
        </p>
        <code>
            tail -f /var/log/canopy-server.log
        </code>
    </section>
</chapter>

</doc>
